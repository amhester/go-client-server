// Code generated by protoc-gen-go.
// source: empire.proto
// DO NOT EDIT!

/*
Package empire_api_service is a generated protocol buffer package.

It is generated from these files:
	empire.proto

It has these top-level messages:
	RequestHeaders
	ResponseHeaders
	RegisterRequest
	RegisterResponse
	SignInRequest
	SignInResponse
	ListPlayersRequest
	ListPlayersResponse
	SubscribeNotificationsRequest
	NotificationsResponse
	UnsubscribeNotificationsRequest
	GameRequestRequest
	GameRequestResponse
	StartGameRequest
	StartGameResponse
	GameStateChangeRequest
	GameStateChangeResponse
	FinishGameRequest
	FinishGameResponse
	Profile
	Game
	Deck
	Card
	Player
	Tower
	TowerBlock
	Character
*/
package empire_api_service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NotificationType int32

const (
	NotificationType_NoneNotification    NotificationType = 0
	NotificationType_Announcement        NotificationType = 1
	NotificationType_DirectMessage       NotificationType = 2
	NotificationType_GameRequest         NotificationType = 3
	NotificationType_GameRequestAccepted NotificationType = 4
	NotificationType_GameRequestDeclined NotificationType = 5
)

var NotificationType_name = map[int32]string{
	0: "NoneNotification",
	1: "Announcement",
	2: "DirectMessage",
	3: "GameRequest",
	4: "GameRequestAccepted",
	5: "GameRequestDeclined",
}
var NotificationType_value = map[string]int32{
	"NoneNotification":    0,
	"Announcement":        1,
	"DirectMessage":       2,
	"GameRequest":         3,
	"GameRequestAccepted": 4,
	"GameRequestDeclined": 5,
}

func (x NotificationType) String() string {
	return proto.EnumName(NotificationType_name, int32(x))
}
func (NotificationType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PlayerStatus int32

const (
	PlayerStatus_NonePlayerStatus     PlayerStatus = 0
	PlayerStatus_IsActive             PlayerStatus = 1
	PlayerStatus_HasSpecial           PlayerStatus = 2
	PlayerStatus_HasElement           PlayerStatus = 3
	PlayerStatus_HasAbility           PlayerStatus = 4
	PlayerStatus_CanPurchasePieces    PlayerStatus = 5
	PlayerStatus_CanPurchaseEquipment PlayerStatus = 6
	PlayerStatus_CanStealPiece        PlayerStatus = 7
)

var PlayerStatus_name = map[int32]string{
	0: "NonePlayerStatus",
	1: "IsActive",
	2: "HasSpecial",
	3: "HasElement",
	4: "HasAbility",
	5: "CanPurchasePieces",
	6: "CanPurchaseEquipment",
	7: "CanStealPiece",
}
var PlayerStatus_value = map[string]int32{
	"NonePlayerStatus":     0,
	"IsActive":             1,
	"HasSpecial":           2,
	"HasElement":           3,
	"HasAbility":           4,
	"CanPurchasePieces":    5,
	"CanPurchaseEquipment": 6,
	"CanStealPiece":        7,
}

func (x PlayerStatus) String() string {
	return proto.EnumName(PlayerStatus_name, int32(x))
}
func (PlayerStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ElementType int32

const (
	ElementType_NoneElement ElementType = 0
	ElementType_Fire        ElementType = 1
	ElementType_Water       ElementType = 2
	ElementType_Wind        ElementType = 3
	ElementType_Earth       ElementType = 4
	ElementType_Lightning   ElementType = 5
	ElementType_Shadow      ElementType = 6
	ElementType_Light       ElementType = 7
	ElementType_Ice         ElementType = 8
)

var ElementType_name = map[int32]string{
	0: "NoneElement",
	1: "Fire",
	2: "Water",
	3: "Wind",
	4: "Earth",
	5: "Lightning",
	6: "Shadow",
	7: "Light",
	8: "Ice",
}
var ElementType_value = map[string]int32{
	"NoneElement": 0,
	"Fire":        1,
	"Water":       2,
	"Wind":        3,
	"Earth":       4,
	"Lightning":   5,
	"Shadow":      6,
	"Light":       7,
	"Ice":         8,
}

func (x ElementType) String() string {
	return proto.EnumName(ElementType_name, int32(x))
}
func (ElementType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type RequestHeaders struct {
	ClientID  string `protobuf:"bytes,1,opt,name=clientID" json:"clientID,omitempty"`
	Timestamp int64  `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *RequestHeaders) Reset()                    { *m = RequestHeaders{} }
func (m *RequestHeaders) String() string            { return proto.CompactTextString(m) }
func (*RequestHeaders) ProtoMessage()               {}
func (*RequestHeaders) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RequestHeaders) GetClientID() string {
	if m != nil {
		return m.ClientID
	}
	return ""
}

func (m *RequestHeaders) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type ResponseHeaders struct {
	ServerID  string `protobuf:"bytes,1,opt,name=serverID" json:"serverID,omitempty"`
	Timestamp int64  `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *ResponseHeaders) Reset()                    { *m = ResponseHeaders{} }
func (m *ResponseHeaders) String() string            { return proto.CompactTextString(m) }
func (*ResponseHeaders) ProtoMessage()               {}
func (*ResponseHeaders) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ResponseHeaders) GetServerID() string {
	if m != nil {
		return m.ServerID
	}
	return ""
}

func (m *ResponseHeaders) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type RegisterRequest struct {
	Headers *RequestHeaders `protobuf:"bytes,1,opt,name=headers" json:"headers,omitempty"`
	Profile *Profile        `protobuf:"bytes,2,opt,name=profile" json:"profile,omitempty"`
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RegisterRequest) GetHeaders() *RequestHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *RegisterRequest) GetProfile() *Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

type RegisterResponse struct {
	Headers *ResponseHeaders `protobuf:"bytes,1,opt,name=headers" json:"headers,omitempty"`
	Profile *Profile         `protobuf:"bytes,2,opt,name=profile" json:"profile,omitempty"`
}

func (m *RegisterResponse) Reset()                    { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()               {}
func (*RegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RegisterResponse) GetHeaders() *ResponseHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *RegisterResponse) GetProfile() *Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

type SignInRequest struct {
	Headers  *RequestHeaders `protobuf:"bytes,1,opt,name=headers" json:"headers,omitempty"`
	Username string          `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Password string          `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
}

func (m *SignInRequest) Reset()                    { *m = SignInRequest{} }
func (m *SignInRequest) String() string            { return proto.CompactTextString(m) }
func (*SignInRequest) ProtoMessage()               {}
func (*SignInRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SignInRequest) GetHeaders() *RequestHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *SignInRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *SignInRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type SignInResponse struct {
	Headers *ResponseHeaders `protobuf:"bytes,1,opt,name=headers" json:"headers,omitempty"`
	Profile *Profile         `protobuf:"bytes,2,opt,name=profile" json:"profile,omitempty"`
}

func (m *SignInResponse) Reset()                    { *m = SignInResponse{} }
func (m *SignInResponse) String() string            { return proto.CompactTextString(m) }
func (*SignInResponse) ProtoMessage()               {}
func (*SignInResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SignInResponse) GetHeaders() *ResponseHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *SignInResponse) GetProfile() *Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

type ListPlayersRequest struct {
	Headers *RequestHeaders `protobuf:"bytes,1,opt,name=headers" json:"headers,omitempty"`
}

func (m *ListPlayersRequest) Reset()                    { *m = ListPlayersRequest{} }
func (m *ListPlayersRequest) String() string            { return proto.CompactTextString(m) }
func (*ListPlayersRequest) ProtoMessage()               {}
func (*ListPlayersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ListPlayersRequest) GetHeaders() *RequestHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

type ListPlayersResponse struct {
	Headers *ResponseHeaders `protobuf:"bytes,1,opt,name=headers" json:"headers,omitempty"`
	Profile []*Profile       `protobuf:"bytes,2,rep,name=profile" json:"profile,omitempty"`
}

func (m *ListPlayersResponse) Reset()                    { *m = ListPlayersResponse{} }
func (m *ListPlayersResponse) String() string            { return proto.CompactTextString(m) }
func (*ListPlayersResponse) ProtoMessage()               {}
func (*ListPlayersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ListPlayersResponse) GetHeaders() *ResponseHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *ListPlayersResponse) GetProfile() []*Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

type SubscribeNotificationsRequest struct {
	Headers *RequestHeaders `protobuf:"bytes,1,opt,name=headers" json:"headers,omitempty"`
	Profile *Profile        `protobuf:"bytes,2,opt,name=profile" json:"profile,omitempty"`
}

func (m *SubscribeNotificationsRequest) Reset()                    { *m = SubscribeNotificationsRequest{} }
func (m *SubscribeNotificationsRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeNotificationsRequest) ProtoMessage()               {}
func (*SubscribeNotificationsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SubscribeNotificationsRequest) GetHeaders() *RequestHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *SubscribeNotificationsRequest) GetProfile() *Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

type NotificationsResponse struct {
	Headers          *ResponseHeaders `protobuf:"bytes,1,opt,name=headers" json:"headers,omitempty"`
	NotificationID   string           `protobuf:"bytes,2,opt,name=notificationID" json:"notificationID,omitempty"`
	Message          string           `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	NotificationType NotificationType `protobuf:"varint,4,opt,name=notificationType,enum=empire.api.service.NotificationType" json:"notificationType,omitempty"`
}

func (m *NotificationsResponse) Reset()                    { *m = NotificationsResponse{} }
func (m *NotificationsResponse) String() string            { return proto.CompactTextString(m) }
func (*NotificationsResponse) ProtoMessage()               {}
func (*NotificationsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *NotificationsResponse) GetHeaders() *ResponseHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *NotificationsResponse) GetNotificationID() string {
	if m != nil {
		return m.NotificationID
	}
	return ""
}

func (m *NotificationsResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *NotificationsResponse) GetNotificationType() NotificationType {
	if m != nil {
		return m.NotificationType
	}
	return NotificationType_NoneNotification
}

type UnsubscribeNotificationsRequest struct {
	Headers *RequestHeaders `protobuf:"bytes,1,opt,name=headers" json:"headers,omitempty"`
	Profile *Profile        `protobuf:"bytes,2,opt,name=profile" json:"profile,omitempty"`
}

func (m *UnsubscribeNotificationsRequest) Reset()         { *m = UnsubscribeNotificationsRequest{} }
func (m *UnsubscribeNotificationsRequest) String() string { return proto.CompactTextString(m) }
func (*UnsubscribeNotificationsRequest) ProtoMessage()    {}
func (*UnsubscribeNotificationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{10}
}

func (m *UnsubscribeNotificationsRequest) GetHeaders() *RequestHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *UnsubscribeNotificationsRequest) GetProfile() *Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

type GameRequestRequest struct {
	Headers          *RequestHeaders `protobuf:"bytes,1,opt,name=headers" json:"headers,omitempty"`
	Profile          *Profile        `protobuf:"bytes,2,opt,name=profile" json:"profile,omitempty"`
	RequestProfileID string          `protobuf:"bytes,3,opt,name=requestProfileID" json:"requestProfileID,omitempty"`
}

func (m *GameRequestRequest) Reset()                    { *m = GameRequestRequest{} }
func (m *GameRequestRequest) String() string            { return proto.CompactTextString(m) }
func (*GameRequestRequest) ProtoMessage()               {}
func (*GameRequestRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GameRequestRequest) GetHeaders() *RequestHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *GameRequestRequest) GetProfile() *Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

func (m *GameRequestRequest) GetRequestProfileID() string {
	if m != nil {
		return m.RequestProfileID
	}
	return ""
}

type GameRequestResponse struct {
	Headers       *RequestHeaders `protobuf:"bytes,1,opt,name=headers" json:"headers,omitempty"`
	Profile       *Profile        `protobuf:"bytes,2,opt,name=profile" json:"profile,omitempty"`
	GameRequestID string          `protobuf:"bytes,3,opt,name=gameRequestID" json:"gameRequestID,omitempty"`
	Accepted      bool            `protobuf:"varint,4,opt,name=accepted" json:"accepted,omitempty"`
}

func (m *GameRequestResponse) Reset()                    { *m = GameRequestResponse{} }
func (m *GameRequestResponse) String() string            { return proto.CompactTextString(m) }
func (*GameRequestResponse) ProtoMessage()               {}
func (*GameRequestResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GameRequestResponse) GetHeaders() *RequestHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *GameRequestResponse) GetProfile() *Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

func (m *GameRequestResponse) GetGameRequestID() string {
	if m != nil {
		return m.GameRequestID
	}
	return ""
}

func (m *GameRequestResponse) GetAccepted() bool {
	if m != nil {
		return m.Accepted
	}
	return false
}

type StartGameRequest struct {
	Headers *RequestHeaders `protobuf:"bytes,1,opt,name=headers" json:"headers,omitempty"`
	Profile *Profile        `protobuf:"bytes,2,opt,name=profile" json:"profile,omitempty"`
	GameID  string          `protobuf:"bytes,3,opt,name=gameID" json:"gameID,omitempty"`
}

func (m *StartGameRequest) Reset()                    { *m = StartGameRequest{} }
func (m *StartGameRequest) String() string            { return proto.CompactTextString(m) }
func (*StartGameRequest) ProtoMessage()               {}
func (*StartGameRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *StartGameRequest) GetHeaders() *RequestHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *StartGameRequest) GetProfile() *Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

func (m *StartGameRequest) GetGameID() string {
	if m != nil {
		return m.GameID
	}
	return ""
}

type StartGameResponse struct {
	Headers *ResponseHeaders `protobuf:"bytes,1,opt,name=headers" json:"headers,omitempty"`
	GameID  string           `protobuf:"bytes,2,opt,name=gameID" json:"gameID,omitempty"`
	Game    *Game            `protobuf:"bytes,3,opt,name=game" json:"game,omitempty"`
}

func (m *StartGameResponse) Reset()                    { *m = StartGameResponse{} }
func (m *StartGameResponse) String() string            { return proto.CompactTextString(m) }
func (*StartGameResponse) ProtoMessage()               {}
func (*StartGameResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *StartGameResponse) GetHeaders() *ResponseHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *StartGameResponse) GetGameID() string {
	if m != nil {
		return m.GameID
	}
	return ""
}

func (m *StartGameResponse) GetGame() *Game {
	if m != nil {
		return m.Game
	}
	return nil
}

type GameStateChangeRequest struct {
	Headers *RequestHeaders `protobuf:"bytes,1,opt,name=headers" json:"headers,omitempty"`
	Profile *Profile        `protobuf:"bytes,2,opt,name=profile" json:"profile,omitempty"`
	State   *Game           `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
}

func (m *GameStateChangeRequest) Reset()                    { *m = GameStateChangeRequest{} }
func (m *GameStateChangeRequest) String() string            { return proto.CompactTextString(m) }
func (*GameStateChangeRequest) ProtoMessage()               {}
func (*GameStateChangeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *GameStateChangeRequest) GetHeaders() *RequestHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *GameStateChangeRequest) GetProfile() *Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

func (m *GameStateChangeRequest) GetState() *Game {
	if m != nil {
		return m.State
	}
	return nil
}

type GameStateChangeResponse struct {
	Headers *ResponseHeaders `protobuf:"bytes,1,opt,name=headers" json:"headers,omitempty"`
	State   *Game            `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
}

func (m *GameStateChangeResponse) Reset()                    { *m = GameStateChangeResponse{} }
func (m *GameStateChangeResponse) String() string            { return proto.CompactTextString(m) }
func (*GameStateChangeResponse) ProtoMessage()               {}
func (*GameStateChangeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GameStateChangeResponse) GetHeaders() *ResponseHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *GameStateChangeResponse) GetState() *Game {
	if m != nil {
		return m.State
	}
	return nil
}

type FinishGameRequest struct {
	Headers *RequestHeaders `protobuf:"bytes,1,opt,name=headers" json:"headers,omitempty"`
	Profile *Profile        `protobuf:"bytes,2,opt,name=profile" json:"profile,omitempty"`
	GameID  string          `protobuf:"bytes,3,opt,name=gameID" json:"gameID,omitempty"`
}

func (m *FinishGameRequest) Reset()                    { *m = FinishGameRequest{} }
func (m *FinishGameRequest) String() string            { return proto.CompactTextString(m) }
func (*FinishGameRequest) ProtoMessage()               {}
func (*FinishGameRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *FinishGameRequest) GetHeaders() *RequestHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *FinishGameRequest) GetProfile() *Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

func (m *FinishGameRequest) GetGameID() string {
	if m != nil {
		return m.GameID
	}
	return ""
}

type FinishGameResponse struct {
	Headers *ResponseHeaders `protobuf:"bytes,1,opt,name=headers" json:"headers,omitempty"`
}

func (m *FinishGameResponse) Reset()                    { *m = FinishGameResponse{} }
func (m *FinishGameResponse) String() string            { return proto.CompactTextString(m) }
func (*FinishGameResponse) ProtoMessage()               {}
func (*FinishGameResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *FinishGameResponse) GetHeaders() *ResponseHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

type Profile struct {
	Id         string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Email      string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	Username   string `protobuf:"bytes,4,opt,name=username" json:"username,omitempty"`
	CreatedOn  int64  `protobuf:"varint,5,opt,name=createdOn" json:"createdOn,omitempty"`
	UpdatedOn  int64  `protobuf:"varint,6,opt,name=updatedOn" json:"updatedOn,omitempty"`
	LastOnline int64  `protobuf:"varint,7,opt,name=lastOnline" json:"lastOnline,omitempty"`
}

func (m *Profile) Reset()                    { *m = Profile{} }
func (m *Profile) String() string            { return proto.CompactTextString(m) }
func (*Profile) ProtoMessage()               {}
func (*Profile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *Profile) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Profile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Profile) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Profile) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Profile) GetCreatedOn() int64 {
	if m != nil {
		return m.CreatedOn
	}
	return 0
}

func (m *Profile) GetUpdatedOn() int64 {
	if m != nil {
		return m.UpdatedOn
	}
	return 0
}

func (m *Profile) GetLastOnline() int64 {
	if m != nil {
		return m.LastOnline
	}
	return 0
}

type Game struct {
	GameID       string    `protobuf:"bytes,1,opt,name=gameID" json:"gameID,omitempty"`
	StartTime    int64     `protobuf:"varint,2,opt,name=startTime" json:"startTime,omitempty"`
	EndTime      int64     `protobuf:"varint,3,opt,name=endTime" json:"endTime,omitempty"`
	Player       *Player   `protobuf:"bytes,4,opt,name=player" json:"player,omitempty"`
	Opponents    []*Player `protobuf:"bytes,5,rep,name=opponents" json:"opponents,omitempty"`
	Turn         int32     `protobuf:"varint,6,opt,name=turn" json:"turn,omitempty"`
	MainDeck     *Deck     `protobuf:"bytes,7,opt,name=mainDeck" json:"mainDeck,omitempty"`
	Armory       *Deck     `protobuf:"bytes,8,opt,name=armory" json:"armory,omitempty"`
	Bank         *Deck     `protobuf:"bytes,9,opt,name=bank" json:"bank,omitempty"`
	Market       *Deck     `protobuf:"bytes,10,opt,name=market" json:"market,omitempty"`
	Starzone     *Deck     `protobuf:"bytes,11,opt,name=starzone" json:"starzone,omitempty"`
	Discard      *Deck     `protobuf:"bytes,12,opt,name=discard" json:"discard,omitempty"`
	MarketLineup *Deck     `protobuf:"bytes,13,opt,name=marketLineup" json:"marketLineup,omitempty"`
}

func (m *Game) Reset()                    { *m = Game{} }
func (m *Game) String() string            { return proto.CompactTextString(m) }
func (*Game) ProtoMessage()               {}
func (*Game) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *Game) GetGameID() string {
	if m != nil {
		return m.GameID
	}
	return ""
}

func (m *Game) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Game) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *Game) GetPlayer() *Player {
	if m != nil {
		return m.Player
	}
	return nil
}

func (m *Game) GetOpponents() []*Player {
	if m != nil {
		return m.Opponents
	}
	return nil
}

func (m *Game) GetTurn() int32 {
	if m != nil {
		return m.Turn
	}
	return 0
}

func (m *Game) GetMainDeck() *Deck {
	if m != nil {
		return m.MainDeck
	}
	return nil
}

func (m *Game) GetArmory() *Deck {
	if m != nil {
		return m.Armory
	}
	return nil
}

func (m *Game) GetBank() *Deck {
	if m != nil {
		return m.Bank
	}
	return nil
}

func (m *Game) GetMarket() *Deck {
	if m != nil {
		return m.Market
	}
	return nil
}

func (m *Game) GetStarzone() *Deck {
	if m != nil {
		return m.Starzone
	}
	return nil
}

func (m *Game) GetDiscard() *Deck {
	if m != nil {
		return m.Discard
	}
	return nil
}

func (m *Game) GetMarketLineup() *Deck {
	if m != nil {
		return m.MarketLineup
	}
	return nil
}

type Deck struct {
	DeckID string  `protobuf:"bytes,1,opt,name=deckID" json:"deckID,omitempty"`
	Name   string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Cards  []*Card `protobuf:"bytes,3,rep,name=cards" json:"cards,omitempty"`
}

func (m *Deck) Reset()                    { *m = Deck{} }
func (m *Deck) String() string            { return proto.CompactTextString(m) }
func (*Deck) ProtoMessage()               {}
func (*Deck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *Deck) GetDeckID() string {
	if m != nil {
		return m.DeckID
	}
	return ""
}

func (m *Deck) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Deck) GetCards() []*Card {
	if m != nil {
		return m.Cards
	}
	return nil
}

type Card struct {
	CardID      string `protobuf:"bytes,1,opt,name=cardID" json:"cardID,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
}

func (m *Card) Reset()                    { *m = Card{} }
func (m *Card) String() string            { return proto.CompactTextString(m) }
func (*Card) ProtoMessage()               {}
func (*Card) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *Card) GetCardID() string {
	if m != nil {
		return m.CardID
	}
	return ""
}

func (m *Card) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Card) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Player struct {
	PlayerID  string     `protobuf:"bytes,1,opt,name=playerID" json:"playerID,omitempty"`
	Profile   *Profile   `protobuf:"bytes,2,opt,name=profile" json:"profile,omitempty"`
	Character *Character `protobuf:"bytes,3,opt,name=character" json:"character,omitempty"`
	Tower     *Tower     `protobuf:"bytes,4,opt,name=tower" json:"tower,omitempty"`
	Hand      *Deck      `protobuf:"bytes,5,opt,name=hand" json:"hand,omitempty"`
	Played    *Deck      `protobuf:"bytes,6,opt,name=played" json:"played,omitempty"`
	Equipment *Deck      `protobuf:"bytes,7,opt,name=equipment" json:"equipment,omitempty"`
	Status    int64      `protobuf:"varint,8,opt,name=status" json:"status,omitempty"`
}

func (m *Player) Reset()                    { *m = Player{} }
func (m *Player) String() string            { return proto.CompactTextString(m) }
func (*Player) ProtoMessage()               {}
func (*Player) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *Player) GetPlayerID() string {
	if m != nil {
		return m.PlayerID
	}
	return ""
}

func (m *Player) GetProfile() *Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

func (m *Player) GetCharacter() *Character {
	if m != nil {
		return m.Character
	}
	return nil
}

func (m *Player) GetTower() *Tower {
	if m != nil {
		return m.Tower
	}
	return nil
}

func (m *Player) GetHand() *Deck {
	if m != nil {
		return m.Hand
	}
	return nil
}

func (m *Player) GetPlayed() *Deck {
	if m != nil {
		return m.Played
	}
	return nil
}

func (m *Player) GetEquipment() *Deck {
	if m != nil {
		return m.Equipment
	}
	return nil
}

func (m *Player) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

type Tower struct {
	Base []*TowerBlock `protobuf:"bytes,1,rep,name=base" json:"base,omitempty"`
	Mid  []*TowerBlock `protobuf:"bytes,2,rep,name=mid" json:"mid,omitempty"`
	Top  []*TowerBlock `protobuf:"bytes,3,rep,name=top" json:"top,omitempty"`
}

func (m *Tower) Reset()                    { *m = Tower{} }
func (m *Tower) String() string            { return proto.CompactTextString(m) }
func (*Tower) ProtoMessage()               {}
func (*Tower) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *Tower) GetBase() []*TowerBlock {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *Tower) GetMid() []*TowerBlock {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *Tower) GetTop() []*TowerBlock {
	if m != nil {
		return m.Top
	}
	return nil
}

type TowerBlock struct {
	Value int32 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (m *TowerBlock) Reset()                    { *m = TowerBlock{} }
func (m *TowerBlock) String() string            { return proto.CompactTextString(m) }
func (*TowerBlock) ProtoMessage()               {}
func (*TowerBlock) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *TowerBlock) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Character struct {
	CharacterID string      `protobuf:"bytes,1,opt,name=characterID" json:"characterID,omitempty"`
	Name        string      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Description string      `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Element     ElementType `protobuf:"varint,4,opt,name=element,enum=empire.api.service.ElementType" json:"element,omitempty"`
}

func (m *Character) Reset()                    { *m = Character{} }
func (m *Character) String() string            { return proto.CompactTextString(m) }
func (*Character) ProtoMessage()               {}
func (*Character) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *Character) GetCharacterID() string {
	if m != nil {
		return m.CharacterID
	}
	return ""
}

func (m *Character) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Character) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Character) GetElement() ElementType {
	if m != nil {
		return m.Element
	}
	return ElementType_NoneElement
}

func init() {
	proto.RegisterType((*RequestHeaders)(nil), "empire.api.service.RequestHeaders")
	proto.RegisterType((*ResponseHeaders)(nil), "empire.api.service.ResponseHeaders")
	proto.RegisterType((*RegisterRequest)(nil), "empire.api.service.RegisterRequest")
	proto.RegisterType((*RegisterResponse)(nil), "empire.api.service.RegisterResponse")
	proto.RegisterType((*SignInRequest)(nil), "empire.api.service.SignInRequest")
	proto.RegisterType((*SignInResponse)(nil), "empire.api.service.SignInResponse")
	proto.RegisterType((*ListPlayersRequest)(nil), "empire.api.service.ListPlayersRequest")
	proto.RegisterType((*ListPlayersResponse)(nil), "empire.api.service.ListPlayersResponse")
	proto.RegisterType((*SubscribeNotificationsRequest)(nil), "empire.api.service.SubscribeNotificationsRequest")
	proto.RegisterType((*NotificationsResponse)(nil), "empire.api.service.NotificationsResponse")
	proto.RegisterType((*UnsubscribeNotificationsRequest)(nil), "empire.api.service.UnsubscribeNotificationsRequest")
	proto.RegisterType((*GameRequestRequest)(nil), "empire.api.service.GameRequestRequest")
	proto.RegisterType((*GameRequestResponse)(nil), "empire.api.service.GameRequestResponse")
	proto.RegisterType((*StartGameRequest)(nil), "empire.api.service.StartGameRequest")
	proto.RegisterType((*StartGameResponse)(nil), "empire.api.service.StartGameResponse")
	proto.RegisterType((*GameStateChangeRequest)(nil), "empire.api.service.GameStateChangeRequest")
	proto.RegisterType((*GameStateChangeResponse)(nil), "empire.api.service.GameStateChangeResponse")
	proto.RegisterType((*FinishGameRequest)(nil), "empire.api.service.FinishGameRequest")
	proto.RegisterType((*FinishGameResponse)(nil), "empire.api.service.FinishGameResponse")
	proto.RegisterType((*Profile)(nil), "empire.api.service.Profile")
	proto.RegisterType((*Game)(nil), "empire.api.service.Game")
	proto.RegisterType((*Deck)(nil), "empire.api.service.Deck")
	proto.RegisterType((*Card)(nil), "empire.api.service.Card")
	proto.RegisterType((*Player)(nil), "empire.api.service.Player")
	proto.RegisterType((*Tower)(nil), "empire.api.service.Tower")
	proto.RegisterType((*TowerBlock)(nil), "empire.api.service.TowerBlock")
	proto.RegisterType((*Character)(nil), "empire.api.service.Character")
	proto.RegisterEnum("empire.api.service.NotificationType", NotificationType_name, NotificationType_value)
	proto.RegisterEnum("empire.api.service.PlayerStatus", PlayerStatus_name, PlayerStatus_value)
	proto.RegisterEnum("empire.api.service.ElementType", ElementType_name, ElementType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EmpireService service

type EmpireServiceClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error)
	ListPlayers(ctx context.Context, in *ListPlayersRequest, opts ...grpc.CallOption) (*ListPlayersResponse, error)
	SubscribeNotifications(ctx context.Context, in *SubscribeNotificationsRequest, opts ...grpc.CallOption) (EmpireService_SubscribeNotificationsClient, error)
	UnsubscribeNotifications(ctx context.Context, in *UnsubscribeNotificationsRequest, opts ...grpc.CallOption) (*ResponseHeaders, error)
	GameRequest(ctx context.Context, in *GameRequestRequest, opts ...grpc.CallOption) (*ResponseHeaders, error)
	AcceptGameRequest(ctx context.Context, in *GameRequestResponse, opts ...grpc.CallOption) (*ResponseHeaders, error)
	DeclineGameRequest(ctx context.Context, in *GameRequestResponse, opts ...grpc.CallOption) (*ResponseHeaders, error)
	StartGame(ctx context.Context, in *StartGameRequest, opts ...grpc.CallOption) (*StartGameResponse, error)
	RegisterGameStateChanges(ctx context.Context, opts ...grpc.CallOption) (EmpireService_RegisterGameStateChangesClient, error)
	FinishGame(ctx context.Context, in *FinishGameRequest, opts ...grpc.CallOption) (*FinishGameResponse, error)
}

type empireServiceClient struct {
	cc *grpc.ClientConn
}

func NewEmpireServiceClient(cc *grpc.ClientConn) EmpireServiceClient {
	return &empireServiceClient{cc}
}

func (c *empireServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := grpc.Invoke(ctx, "/empire.api.service.EmpireService/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *empireServiceClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	out := new(SignInResponse)
	err := grpc.Invoke(ctx, "/empire.api.service.EmpireService/SignIn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *empireServiceClient) ListPlayers(ctx context.Context, in *ListPlayersRequest, opts ...grpc.CallOption) (*ListPlayersResponse, error) {
	out := new(ListPlayersResponse)
	err := grpc.Invoke(ctx, "/empire.api.service.EmpireService/ListPlayers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *empireServiceClient) SubscribeNotifications(ctx context.Context, in *SubscribeNotificationsRequest, opts ...grpc.CallOption) (EmpireService_SubscribeNotificationsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EmpireService_serviceDesc.Streams[0], c.cc, "/empire.api.service.EmpireService/SubscribeNotifications", opts...)
	if err != nil {
		return nil, err
	}
	x := &empireServiceSubscribeNotificationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EmpireService_SubscribeNotificationsClient interface {
	Recv() (*NotificationsResponse, error)
	grpc.ClientStream
}

type empireServiceSubscribeNotificationsClient struct {
	grpc.ClientStream
}

func (x *empireServiceSubscribeNotificationsClient) Recv() (*NotificationsResponse, error) {
	m := new(NotificationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *empireServiceClient) UnsubscribeNotifications(ctx context.Context, in *UnsubscribeNotificationsRequest, opts ...grpc.CallOption) (*ResponseHeaders, error) {
	out := new(ResponseHeaders)
	err := grpc.Invoke(ctx, "/empire.api.service.EmpireService/UnsubscribeNotifications", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *empireServiceClient) GameRequest(ctx context.Context, in *GameRequestRequest, opts ...grpc.CallOption) (*ResponseHeaders, error) {
	out := new(ResponseHeaders)
	err := grpc.Invoke(ctx, "/empire.api.service.EmpireService/GameRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *empireServiceClient) AcceptGameRequest(ctx context.Context, in *GameRequestResponse, opts ...grpc.CallOption) (*ResponseHeaders, error) {
	out := new(ResponseHeaders)
	err := grpc.Invoke(ctx, "/empire.api.service.EmpireService/AcceptGameRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *empireServiceClient) DeclineGameRequest(ctx context.Context, in *GameRequestResponse, opts ...grpc.CallOption) (*ResponseHeaders, error) {
	out := new(ResponseHeaders)
	err := grpc.Invoke(ctx, "/empire.api.service.EmpireService/DeclineGameRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *empireServiceClient) StartGame(ctx context.Context, in *StartGameRequest, opts ...grpc.CallOption) (*StartGameResponse, error) {
	out := new(StartGameResponse)
	err := grpc.Invoke(ctx, "/empire.api.service.EmpireService/StartGame", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *empireServiceClient) RegisterGameStateChanges(ctx context.Context, opts ...grpc.CallOption) (EmpireService_RegisterGameStateChangesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EmpireService_serviceDesc.Streams[1], c.cc, "/empire.api.service.EmpireService/RegisterGameStateChanges", opts...)
	if err != nil {
		return nil, err
	}
	x := &empireServiceRegisterGameStateChangesClient{stream}
	return x, nil
}

type EmpireService_RegisterGameStateChangesClient interface {
	Send(*GameStateChangeRequest) error
	Recv() (*GameStateChangeResponse, error)
	grpc.ClientStream
}

type empireServiceRegisterGameStateChangesClient struct {
	grpc.ClientStream
}

func (x *empireServiceRegisterGameStateChangesClient) Send(m *GameStateChangeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *empireServiceRegisterGameStateChangesClient) Recv() (*GameStateChangeResponse, error) {
	m := new(GameStateChangeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *empireServiceClient) FinishGame(ctx context.Context, in *FinishGameRequest, opts ...grpc.CallOption) (*FinishGameResponse, error) {
	out := new(FinishGameResponse)
	err := grpc.Invoke(ctx, "/empire.api.service.EmpireService/FinishGame", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EmpireService service

type EmpireServiceServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	SignIn(context.Context, *SignInRequest) (*SignInResponse, error)
	ListPlayers(context.Context, *ListPlayersRequest) (*ListPlayersResponse, error)
	SubscribeNotifications(*SubscribeNotificationsRequest, EmpireService_SubscribeNotificationsServer) error
	UnsubscribeNotifications(context.Context, *UnsubscribeNotificationsRequest) (*ResponseHeaders, error)
	GameRequest(context.Context, *GameRequestRequest) (*ResponseHeaders, error)
	AcceptGameRequest(context.Context, *GameRequestResponse) (*ResponseHeaders, error)
	DeclineGameRequest(context.Context, *GameRequestResponse) (*ResponseHeaders, error)
	StartGame(context.Context, *StartGameRequest) (*StartGameResponse, error)
	RegisterGameStateChanges(EmpireService_RegisterGameStateChangesServer) error
	FinishGame(context.Context, *FinishGameRequest) (*FinishGameResponse, error)
}

func RegisterEmpireServiceServer(s *grpc.Server, srv EmpireServiceServer) {
	s.RegisterService(&_EmpireService_serviceDesc, srv)
}

func _EmpireService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmpireServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empire.api.service.EmpireService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmpireServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmpireService_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmpireServiceServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empire.api.service.EmpireService/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmpireServiceServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmpireService_ListPlayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlayersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmpireServiceServer).ListPlayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empire.api.service.EmpireService/ListPlayers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmpireServiceServer).ListPlayers(ctx, req.(*ListPlayersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmpireService_SubscribeNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeNotificationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EmpireServiceServer).SubscribeNotifications(m, &empireServiceSubscribeNotificationsServer{stream})
}

type EmpireService_SubscribeNotificationsServer interface {
	Send(*NotificationsResponse) error
	grpc.ServerStream
}

type empireServiceSubscribeNotificationsServer struct {
	grpc.ServerStream
}

func (x *empireServiceSubscribeNotificationsServer) Send(m *NotificationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EmpireService_UnsubscribeNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmpireServiceServer).UnsubscribeNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empire.api.service.EmpireService/UnsubscribeNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmpireServiceServer).UnsubscribeNotifications(ctx, req.(*UnsubscribeNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmpireService_GameRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmpireServiceServer).GameRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empire.api.service.EmpireService/GameRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmpireServiceServer).GameRequest(ctx, req.(*GameRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmpireService_AcceptGameRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameRequestResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmpireServiceServer).AcceptGameRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empire.api.service.EmpireService/AcceptGameRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmpireServiceServer).AcceptGameRequest(ctx, req.(*GameRequestResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmpireService_DeclineGameRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameRequestResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmpireServiceServer).DeclineGameRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empire.api.service.EmpireService/DeclineGameRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmpireServiceServer).DeclineGameRequest(ctx, req.(*GameRequestResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmpireService_StartGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmpireServiceServer).StartGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empire.api.service.EmpireService/StartGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmpireServiceServer).StartGame(ctx, req.(*StartGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmpireService_RegisterGameStateChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EmpireServiceServer).RegisterGameStateChanges(&empireServiceRegisterGameStateChangesServer{stream})
}

type EmpireService_RegisterGameStateChangesServer interface {
	Send(*GameStateChangeResponse) error
	Recv() (*GameStateChangeRequest, error)
	grpc.ServerStream
}

type empireServiceRegisterGameStateChangesServer struct {
	grpc.ServerStream
}

func (x *empireServiceRegisterGameStateChangesServer) Send(m *GameStateChangeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *empireServiceRegisterGameStateChangesServer) Recv() (*GameStateChangeRequest, error) {
	m := new(GameStateChangeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EmpireService_FinishGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmpireServiceServer).FinishGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empire.api.service.EmpireService/FinishGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmpireServiceServer).FinishGame(ctx, req.(*FinishGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EmpireService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "empire.api.service.EmpireService",
	HandlerType: (*EmpireServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _EmpireService_Register_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _EmpireService_SignIn_Handler,
		},
		{
			MethodName: "ListPlayers",
			Handler:    _EmpireService_ListPlayers_Handler,
		},
		{
			MethodName: "UnsubscribeNotifications",
			Handler:    _EmpireService_UnsubscribeNotifications_Handler,
		},
		{
			MethodName: "GameRequest",
			Handler:    _EmpireService_GameRequest_Handler,
		},
		{
			MethodName: "AcceptGameRequest",
			Handler:    _EmpireService_AcceptGameRequest_Handler,
		},
		{
			MethodName: "DeclineGameRequest",
			Handler:    _EmpireService_DeclineGameRequest_Handler,
		},
		{
			MethodName: "StartGame",
			Handler:    _EmpireService_StartGame_Handler,
		},
		{
			MethodName: "FinishGame",
			Handler:    _EmpireService_FinishGame_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeNotifications",
			Handler:       _EmpireService_SubscribeNotifications_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RegisterGameStateChanges",
			Handler:       _EmpireService_RegisterGameStateChanges_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "empire.proto",
}

func init() { proto.RegisterFile("empire.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1541 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xcd, 0x6f, 0x1c, 0xc5,
	0x12, 0xf7, 0xec, 0xf7, 0xd6, 0xda, 0xce, 0xb8, 0x93, 0x38, 0xf3, 0xf6, 0xe5, 0xc3, 0x6f, 0x5e,
	0x48, 0x8c, 0x41, 0xc6, 0x6c, 0x00, 0x81, 0x08, 0x07, 0x63, 0x3b, 0xc4, 0x10, 0x12, 0x33, 0x6b,
	0x14, 0x09, 0x81, 0x44, 0x7b, 0xa6, 0xe3, 0x6d, 0x79, 0xb7, 0x67, 0x32, 0xdd, 0x6b, 0xcb, 0xb9,
	0x83, 0x90, 0xb8, 0x70, 0x40, 0x88, 0x13, 0x70, 0xe2, 0x3f, 0xe0, 0x84, 0xb8, 0x73, 0xe0, 0x2f,
	0xe1, 0xc4, 0x95, 0x1b, 0xea, 0xee, 0xf9, 0xda, 0xdd, 0xb1, 0xc7, 0x0a, 0x8e, 0x9c, 0xdb, 0x56,
	0xf5, 0xaf, 0xab, 0x7e, 0xd5, 0x5d, 0x35, 0x5b, 0xd5, 0x30, 0x4d, 0x06, 0x01, 0x0d, 0xc9, 0x72,
	0x10, 0xfa, 0xc2, 0x47, 0x28, 0x92, 0x70, 0x40, 0x97, 0x39, 0x09, 0xf7, 0xa9, 0x4b, 0xec, 0xf7,
	0x61, 0xd6, 0x21, 0x8f, 0x87, 0x84, 0x8b, 0xbb, 0x04, 0x7b, 0x24, 0xe4, 0xa8, 0x0d, 0x0d, 0xb7,
	0x4f, 0x09, 0x13, 0x9b, 0xeb, 0x96, 0xb1, 0x60, 0x2c, 0x36, 0x9d, 0x44, 0x46, 0x97, 0xa1, 0x29,
	0xe8, 0x80, 0x70, 0x81, 0x07, 0x81, 0x55, 0x5a, 0x30, 0x16, 0xcb, 0x4e, 0xaa, 0xb0, 0x3f, 0x80,
	0x73, 0x0e, 0xe1, 0x81, 0xcf, 0x38, 0xc9, 0x18, 0x93, 0x9e, 0x48, 0x98, 0x1a, 0x8b, 0xe5, 0x02,
	0x63, 0x5f, 0x1a, 0xd2, 0xda, 0x2e, 0xe5, 0x82, 0x84, 0x11, 0x43, 0x74, 0x1b, 0xea, 0x3d, 0x6d,
	0x58, 0x19, 0x6b, 0x75, 0xec, 0xe5, 0xc9, 0x90, 0x96, 0x47, 0xe3, 0x71, 0xe2, 0x2d, 0xe8, 0x75,
	0xa8, 0x07, 0xa1, 0xff, 0x88, 0xf6, 0x89, 0xf2, 0xd6, 0xea, 0xfc, 0x37, 0x6f, 0xf7, 0x96, 0x86,
	0x38, 0x31, 0xd6, 0xfe, 0xca, 0x00, 0x33, 0x25, 0xa2, 0xc3, 0x43, 0xef, 0x8c, 0x33, 0xf9, 0x7f,
	0x3e, 0x93, 0x91, 0xd3, 0xf8, 0xd7, 0x54, 0xbe, 0x30, 0x60, 0xa6, 0x4b, 0x77, 0xd9, 0x26, 0x3b,
	0x9d, 0x13, 0x69, 0x43, 0x63, 0xc8, 0x49, 0xc8, 0xf0, 0x40, 0xf3, 0x68, 0x3a, 0x89, 0x2c, 0xd7,
	0x02, 0xcc, 0xf9, 0x81, 0x1f, 0x7a, 0x56, 0x59, 0xaf, 0xc5, 0xb2, 0xbc, 0x9b, 0xd9, 0x98, 0xc7,
	0x99, 0x1e, 0x88, 0x03, 0xe8, 0x1e, 0xe5, 0x62, 0xab, 0x8f, 0x0f, 0xa5, 0xb9, 0xd3, 0x38, 0x14,
	0xfb, 0x6b, 0x03, 0xce, 0x8f, 0x18, 0x7d, 0x06, 0x11, 0x96, 0x4f, 0x1c, 0xe1, 0xb7, 0x06, 0x5c,
	0xe9, 0x0e, 0x77, 0xb8, 0x1b, 0xd2, 0x1d, 0x72, 0xdf, 0x17, 0xf4, 0x11, 0x75, 0xb1, 0xa0, 0x3e,
	0xe3, 0x67, 0x5a, 0x14, 0x7f, 0x1a, 0x70, 0x71, 0x8c, 0xcd, 0xe9, 0x1c, 0xd3, 0x0d, 0x98, 0x65,
	0x19, 0xbb, 0x9b, 0xeb, 0x51, 0x62, 0x8e, 0x69, 0x91, 0x05, 0xf5, 0x01, 0xe1, 0x1c, 0xef, 0x92,
	0x28, 0x3b, 0x63, 0x11, 0x6d, 0x81, 0x99, 0xc5, 0x6e, 0x1f, 0x06, 0xc4, 0xaa, 0x2c, 0x18, 0x8b,
	0xb3, 0x9d, 0xeb, 0x79, 0x4c, 0xee, 0x8f, 0x61, 0x9d, 0x89, 0xdd, 0xf6, 0x77, 0x06, 0x5c, 0xfb,
	0x98, 0xf1, 0xe7, 0xef, 0x16, 0x7e, 0x31, 0x00, 0xbd, 0x87, 0x07, 0x24, 0x32, 0x7b, 0x96, 0x5c,
	0xd0, 0x12, 0x98, 0xa1, 0xb6, 0x18, 0x2d, 0x6d, 0xae, 0x47, 0x37, 0x33, 0xa1, 0xb7, 0xff, 0x30,
	0xe0, 0xfc, 0x08, 0xef, 0x28, 0x77, 0xce, 0x84, 0xf8, 0x75, 0x98, 0xd9, 0x4d, 0xb9, 0x24, 0xac,
	0x47, 0x95, 0xf2, 0x73, 0x88, 0x5d, 0x97, 0x04, 0x82, 0x78, 0x2a, 0x9b, 0x1a, 0x4e, 0x22, 0xdb,
	0x3f, 0x1a, 0x60, 0x76, 0x05, 0x0e, 0x45, 0x26, 0xa6, 0xb3, 0x89, 0x65, 0x1e, 0x6a, 0x92, 0x76,
	0x12, 0x44, 0x24, 0xd9, 0xdf, 0x1b, 0x30, 0x97, 0x61, 0x78, 0x3a, 0xa5, 0x9a, 0x3a, 0x2b, 0x65,
	0x9d, 0xa1, 0x97, 0xa1, 0x22, 0x7f, 0x29, 0x0a, 0xad, 0x8e, 0x95, 0x67, 0x53, 0xd1, 0x50, 0x28,
	0xfb, 0x37, 0x03, 0xe6, 0xa5, 0xd8, 0x15, 0x58, 0x90, 0xb5, 0x1e, 0x66, 0xbb, 0x67, 0x7b, 0x84,
	0xcb, 0x50, 0xe5, 0x92, 0x4a, 0x21, 0x7d, 0x0d, 0x93, 0xed, 0xc1, 0xa5, 0x09, 0xfe, 0xa7, 0x73,
	0xc0, 0x09, 0x95, 0xd2, 0xc9, 0xa8, 0xfc, 0x64, 0xc0, 0xdc, 0x1d, 0xca, 0x28, 0xef, 0x3d, 0xb7,
	0x89, 0xd8, 0x05, 0x94, 0x65, 0x78, 0x2a, 0xe7, 0x64, 0xff, 0x6a, 0x40, 0x3d, 0x62, 0x80, 0x66,
	0xa1, 0x44, 0xbd, 0xa8, 0xd5, 0x2c, 0x51, 0x0f, 0x21, 0xa8, 0x64, 0xda, 0x1b, 0xf5, 0x1b, 0x5d,
	0x80, 0x2a, 0x19, 0x60, 0xda, 0x8f, 0xb8, 0x69, 0x61, 0xa4, 0x19, 0xaa, 0x8c, 0x35, 0x43, 0x97,
	0xa1, 0xe9, 0x86, 0x04, 0x0b, 0xe2, 0x3d, 0x60, 0x56, 0x55, 0xb7, 0xaa, 0x89, 0x42, 0xae, 0x0e,
	0x03, 0x2f, 0x5a, 0xad, 0xe9, 0xd5, 0x44, 0x81, 0xae, 0x02, 0xf4, 0x31, 0x17, 0x0f, 0x58, 0x9f,
	0x32, 0x62, 0xd5, 0xd5, 0x72, 0x46, 0x63, 0xff, 0x5e, 0x81, 0x8a, 0x3c, 0x8d, 0xcc, 0x99, 0x19,
	0x23, 0xf5, 0x74, 0x19, 0x9a, 0x5c, 0xd6, 0xee, 0x36, 0x8d, 0xe2, 0x28, 0x3b, 0xa9, 0x42, 0xfe,
	0x11, 0x12, 0xe6, 0xa9, 0xb5, 0xb2, 0x5a, 0x8b, 0x45, 0xd4, 0x81, 0x5a, 0xa0, 0x7a, 0x18, 0x15,
	0x4e, 0xab, 0xd3, 0xce, 0xbd, 0x39, 0x85, 0x70, 0x22, 0x24, 0x7a, 0x13, 0x9a, 0x7e, 0x10, 0xf8,
	0x8c, 0x30, 0xc1, 0xad, 0xaa, 0xea, 0x53, 0x8e, 0xdb, 0x96, 0x82, 0xe5, 0x41, 0x8b, 0x61, 0xa8,
	0xe3, 0xaf, 0x3a, 0xea, 0x37, 0x7a, 0x0d, 0x1a, 0x03, 0x4c, 0xd9, 0x3a, 0x71, 0xf7, 0x54, 0xe0,
	0x47, 0xe4, 0xb0, 0x5c, 0x77, 0x12, 0x24, 0x5a, 0x81, 0x1a, 0x0e, 0x07, 0x7e, 0x78, 0x68, 0x35,
	0x0a, 0xf6, 0x44, 0x38, 0xf9, 0xc5, 0xd9, 0xc1, 0x6c, 0xcf, 0x6a, 0x16, 0xe0, 0x15, 0x4a, 0xda,
	0x1f, 0xe0, 0x70, 0x8f, 0x08, 0x0b, 0x8a, 0xec, 0x6b, 0x9c, 0x8c, 0x43, 0x1e, 0xf8, 0x13, 0x9f,
	0x11, 0xab, 0x55, 0x14, 0x47, 0x8c, 0x44, 0x1d, 0xa8, 0x7b, 0x94, 0xbb, 0x38, 0xf4, 0xac, 0xe9,
	0x82, 0x4d, 0x31, 0x10, 0xdd, 0x86, 0x69, 0xed, 0xf3, 0x1e, 0x65, 0x64, 0x18, 0x58, 0x33, 0x05,
	0x1b, 0x47, 0xd0, 0xf6, 0x0e, 0x54, 0xd4, 0x09, 0xce, 0x43, 0xcd, 0x23, 0xee, 0x5e, 0x9a, 0x49,
	0x5a, 0xca, 0x2d, 0x86, 0x65, 0xa8, 0x4a, 0xcf, 0xdc, 0x2a, 0xab, 0xdb, 0xce, 0x75, 0xb5, 0x86,
	0x43, 0xcf, 0xd1, 0x30, 0x7b, 0x1b, 0x2a, 0x52, 0x94, 0x3e, 0xa4, 0x22, 0xf5, 0xa1, 0xa5, 0x5c,
	0x1f, 0x0b, 0xd0, 0xf2, 0x88, 0x6c, 0x9e, 0x02, 0xd9, 0x33, 0x45, 0x65, 0x97, 0x55, 0xd9, 0x7f,
	0x97, 0xa0, 0xa6, 0x73, 0x4a, 0x0d, 0x1e, 0xea, 0x57, 0x3a, 0x32, 0xc6, 0xf2, 0xd3, 0x7e, 0x8d,
	0xde, 0x86, 0xa6, 0xdb, 0xc3, 0x21, 0x76, 0x05, 0x09, 0xa3, 0xef, 0xfa, 0x95, 0xdc, 0x38, 0x63,
	0x90, 0x93, 0xe2, 0xd1, 0x2b, 0x50, 0x15, 0xfe, 0x41, 0x52, 0x45, 0xff, 0xc9, 0xdb, 0xb8, 0x2d,
	0x01, 0x8e, 0xc6, 0xc9, 0x6c, 0xec, 0x61, 0xe6, 0xa9, 0xef, 0xc4, 0xb1, 0xd9, 0x28, 0x51, 0x32,
	0x1b, 0x55, 0x78, 0x9e, 0xaa, 0x9c, 0x63, 0xb3, 0x51, 0xe3, 0xd0, 0x1b, 0xd0, 0x24, 0x8f, 0x87,
	0x34, 0x18, 0x10, 0x26, 0x0a, 0xcb, 0x2a, 0x85, 0xca, 0x1b, 0x93, 0xff, 0x13, 0x43, 0xae, 0xea,
	0xaa, 0xec, 0x44, 0x92, 0x6c, 0x5f, 0xaa, 0x2a, 0x00, 0xd4, 0x91, 0x75, 0xc4, 0x89, 0x65, 0xa8,
	0x54, 0xb8, 0x7a, 0x64, 0xa4, 0xef, 0xf6, 0x7d, 0x5d, 0x4d, 0x9c, 0xa0, 0x15, 0x28, 0x0f, 0xa8,
	0x17, 0xcd, 0x34, 0x45, 0x5b, 0x24, 0x54, 0xee, 0x10, 0x7e, 0x10, 0xe5, 0x5b, 0xe1, 0x0e, 0xe1,
	0x07, 0xb6, 0x0d, 0x90, 0xaa, 0xe4, 0xe7, 0x7b, 0x1f, 0xf7, 0x87, 0x44, 0x65, 0x47, 0xd5, 0xd1,
	0x82, 0xfd, 0x83, 0x01, 0xcd, 0xe4, 0xfe, 0x64, 0xc6, 0x25, 0x37, 0x98, 0xe4, 0x51, 0x56, 0xf5,
	0x74, 0x79, 0x8a, 0xde, 0x82, 0x3a, 0xe9, 0x13, 0x75, 0xf2, 0x7a, 0xa6, 0xb8, 0x96, 0xc7, 0x7f,
	0x43, 0x43, 0xd4, 0x38, 0x11, 0xe3, 0x97, 0xbe, 0x31, 0xc0, 0x1c, 0x1f, 0x36, 0xd0, 0x05, 0xa9,
	0x63, 0x23, 0x23, 0x85, 0x39, 0x85, 0x4c, 0x98, 0x5e, 0x65, 0xcc, 0x1f, 0x32, 0x57, 0x6d, 0x35,
	0x0d, 0x34, 0x07, 0x33, 0xeb, 0x34, 0x24, 0xae, 0xf8, 0x50, 0x4f, 0x39, 0x66, 0x09, 0x9d, 0x83,
	0x56, 0xe6, 0x6f, 0xde, 0x2c, 0xa3, 0x4b, 0x23, 0x4d, 0xf5, 0x6a, 0xd4, 0x9d, 0x9a, 0x95, 0xb1,
	0x85, 0x75, 0xe2, 0xca, 0xff, 0x1d, 0xcf, 0xac, 0x2e, 0xfd, 0x6c, 0xc0, 0xb4, 0xae, 0xba, 0xae,
	0x4a, 0x85, 0x98, 0x4e, 0x56, 0x67, 0x4e, 0xa1, 0x69, 0x68, 0x6c, 0xf2, 0x55, 0x57, 0xd0, 0x7d,
	0x62, 0x1a, 0x68, 0x16, 0xe0, 0x2e, 0xe6, 0xdd, 0x80, 0xb8, 0x14, 0xf7, 0xcd, 0x52, 0x24, 0x47,
	0x21, 0x9b, 0xe5, 0x48, 0x5e, 0xdd, 0xa1, 0x7d, 0x2a, 0x0e, 0xcd, 0x0a, 0xba, 0x08, 0x73, 0x6b,
	0x98, 0x6d, 0x0d, 0x43, 0xb7, 0x87, 0x39, 0xd9, 0xa2, 0xc4, 0x25, 0xdc, 0xac, 0x22, 0x0b, 0x2e,
	0x64, 0xd4, 0x1b, 0x71, 0x96, 0x9a, 0x35, 0x19, 0xeb, 0x1a, 0x66, 0x5d, 0x41, 0x70, 0x5f, 0xa1,
	0xcd, 0xfa, 0xd2, 0x01, 0xb4, 0x32, 0x67, 0x2a, 0x43, 0x97, 0x34, 0x63, 0x9f, 0x53, 0xa8, 0x01,
	0x95, 0x3b, 0x34, 0x94, 0xec, 0x9a, 0x50, 0x7d, 0x88, 0x05, 0x09, 0xcd, 0x92, 0x54, 0x3e, 0xa4,
	0xcc, 0x33, 0xcb, 0x52, 0xb9, 0x81, 0x43, 0xd1, 0x33, 0x2b, 0x68, 0x06, 0x9a, 0xf7, 0xe8, 0x6e,
	0x4f, 0x30, 0xca, 0x76, 0xcd, 0x2a, 0x02, 0xa8, 0x75, 0x7b, 0xd8, 0xf3, 0x0f, 0xcc, 0x9a, 0x44,
	0xa9, 0x25, 0xb3, 0x8e, 0xea, 0x50, 0xde, 0x74, 0x89, 0xd9, 0xe8, 0xfc, 0xd5, 0x80, 0x99, 0x0d,
	0x75, 0xc1, 0x5d, 0x7d, 0xb7, 0xe8, 0x21, 0x34, 0xe2, 0xd7, 0x20, 0x74, 0x44, 0x9b, 0x32, 0xf2,
	0x68, 0xd5, 0xbe, 0x7e, 0x3c, 0x48, 0xf7, 0x34, 0xf6, 0x14, 0xfa, 0x08, 0x6a, 0xfa, 0x4d, 0x05,
	0xfd, 0x2f, 0x6f, 0xc7, 0xc8, 0xbb, 0x4f, 0xdb, 0x3e, 0x0e, 0x92, 0x98, 0xfc, 0x1c, 0x5a, 0x99,
	0x97, 0x0c, 0x74, 0x23, 0x6f, 0xd3, 0xe4, 0xfb, 0x49, 0xfb, 0x66, 0x21, 0x2e, 0xf1, 0xf0, 0x04,
	0xe6, 0xf3, 0x5f, 0x27, 0xd0, 0xab, 0xb9, 0x0c, 0x8f, 0x9b, 0xa1, 0xdb, 0x2f, 0x16, 0xcd, 0xe7,
	0x19, 0xcf, 0x2b, 0x06, 0xda, 0x07, 0xeb, 0xa8, 0xa9, 0x1c, 0xdd, 0xca, 0x33, 0x55, 0x30, 0xc3,
	0xb7, 0x4f, 0xd2, 0x75, 0xda, 0x53, 0xe8, 0xd3, 0x91, 0xc2, 0xcb, 0x3f, 0xd5, 0xc9, 0xa9, 0xfc,
	0xa4, 0xd6, 0x5d, 0x98, 0xd3, 0xa5, 0x9b, 0xf5, 0x71, 0xb3, 0xd0, 0x87, 0x36, 0x73, 0x52, 0x27,
	0x1e, 0xa0, 0xe8, 0x33, 0xf0, 0x2c, 0xbd, 0x7c, 0x02, 0xcd, 0x64, 0xe8, 0x44, 0xb9, 0x65, 0x30,
	0x3e, 0x35, 0xb7, 0x5f, 0x28, 0x40, 0x25, 0x89, 0x77, 0x08, 0x56, 0x5c, 0x43, 0x63, 0xd3, 0x17,
	0x47, 0x4b, 0x47, 0xc5, 0x31, 0x39, 0x63, 0xb6, 0x5f, 0x3a, 0x11, 0x36, 0x76, 0xbb, 0x68, 0xac,
	0x18, 0xe8, 0x33, 0x80, 0x74, 0x86, 0x41, 0xb9, 0x8c, 0x27, 0xa6, 0xb0, 0xf6, 0x8d, 0x22, 0x58,
	0xec, 0x62, 0xa7, 0xa6, 0x1e, 0xeb, 0x6f, 0xfd, 0x13, 0x00, 0x00, 0xff, 0xff, 0xa8, 0x67, 0xac,
	0xb7, 0xbc, 0x17, 0x00, 0x00,
}
